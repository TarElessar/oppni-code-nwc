
. subject-level analysis modules for fast implementation of different models
. "analysis" refers to any feature extraction model. this includes both task-based regression
  analyses (GLM) but also resting-state connectivity analyses and other BOLD measures (FALFF)

. as with processing modules, there is a standardized I/O format required to be shared
. module names are more flexible atm, no specific convention required

Seed-based analyses: 
    
    output = [module name]( <datamat>, <seed_struc>, <params_struc> )

Task-based analyses:

    output = [module name]( <datamat>, <task_struc>, <params_struc> )

Other analyses:

    output = [module name]( <datamat>, <params_struc> )


when designing the module, assume the following:

<datamat> is a cell array of the processed subject data, each cell representing a run
           data has been reshaped into a 2D matrix in conformity with the group-level functional brain mask

<seed_struc> is the structure generated by "interpret_seed_list", containing
           a set of n subfields, corresponding to seed/label maps. each has a "label", "location" and "type" subfield
           the structure also includes a 2D matrix "seedmat" of the seed maps, 
           reshaped into a 2D matrix in conformity with the group-level functional brain mask
           The latter is what you will presumably used to analyze

<task_struc>is the cell array generated by "interpret_contrast_list", containing
           a set of r cells, corresponding to task runs. Each cell then has a structure
           with n subfields, corresponding to different contrasts of interest. each has a 
           "label", "design_mat", special structs "c1/c2" (column indices of design matrix to contrast)
           "o1/o2" (onset time index, in TR units - for instantaneous events)
           "b1/b2" (binary task-on time indices - for classifier analysis)
           You will presumably use different subfield data depending on your chosen analysis model

 output structure should also have the following

output.image.<image type> --> 2D column arrays of parameter brain maps (camelcase naming)
output.stats.<stat type>  --> summary statistics, as row vector
output.mat2d.<stat type>  --> 2d matrix, e.g. connectivity